package dtime

import "time"

type spanParser Peg {

  start time.Time

  offset float64 
  offdir float64

  year int
  month int
  day int
  wday int
  hour int
  min int

  _float float64
  _int int
  _e error
}

DTime

  <- Offset { p.start = *_deftime() }

  /  Weekday Offset? END
     {
       p.start = *_deftime()
       mon := MondayOf(&p.start)
       p.start = mon.Add(time.Duration(p.wday) * time.Hour * 24)
     }

  /  Month Offset? END
     {
       t := _deftime()
       m := time.Month(p.month)
       p.start = time.Date(t.Year(),m,1,0,0,0,0,t.Location())
     }

  /  Time Offset? END
     {
       t := *Today()
       p.start = time.Date(t.Year(),t.Month(),t.Day(),p.hour,p.min,0,0,t.Location())
     }

  /  Time ',' Weekday Offset? END
     {
       t := MondayOf(Today())
       day := t.Day() + p.wday
       p.start = time.Date(t.Year(),t.Month(),day,p.hour,p.min,0,0,t.Location())
     }

  /  Time ',' Weekday ',' Year Offset?  END
     {
       t := MondayOf(Today())
       day := t.Day() + p.wday
       p.start = time.Date(p.year,t.Month(),day,p.hour,p.min,0,0,t.Location())
     }

  /  Time ',' Month Offset? END
     {
       t := _deftime()
       p.start = time.Date(t.Year(),time.Month(p.month),t.Day(),p.hour,p.min,0,0,t.Location())
     }

  /  Time ',' Month ',' Year Offset? END
     {
       t := _deftime()
       p.start = time.Date(t.Year(),time.Month(p.month),t.Day(),p.hour,p.min,0,0,t.Location())
     }

  /  Time ',' Year Offset? END
     {
       t := _deftime()
       p.start = time.Date(p.year,t.Month(),t.Day(),p.hour,p.min,0,0,t.Location())
     }

  /  Weekday ',' Year Offset? END
     {
       t := _deftime()
       day := MondayOf(t).Day() + p.wday
       p.start = time.Date(p.year,t.Month(),day,p.hour,p.min,0,0,t.Location())
     }

  / Month Day Offset? END
  {
       t := _deftime()
       p.start = time.Date(t.Year(),time.Month(p.month),p.day,0,0,0,0,t.Location())
  }
  
  /  Time ',' Month Day Offset? END
     {
       t := _deftime()
       p.start = time.Date(t.Year(),time.Month(p.month),p.day,p.hour,p.min,0,0,t.Location())
     }

  /  ',' Year Offset? END
     {
       t := _deftime()
       p.start = time.Date(p.year,1,1,0,0,0,0,t.Location())

     }

  /  Month ',' Year Offset? END
     {
       t := _deftime()
       p.start = time.Date(p.year,time.Month(p.month),1,0,0,0,0,t.Location())
     }

  /  Month Day ',' Year Offset? END
     {
       t := _deftime()
       p.start = time.Date(p.year,time.Month(p.month),p.day,0,0,0,0,t.Location())
     }

  /  Time ',' Month Day ',' Year Offset? END
     {
       t := _deftime()
       p.start = time.Date(p.year,time.Month(p.month),p.day,p.hour,p.min,0,0,t.Location())
     }

  / ("now" / '.') Offset? END { p.start = *_deftime() }

  / ("td" / "to" "day"?) Offset END
    {
      p.start = *Today()
    }

  / ("td" / "to" "day"?)  END
    {
      p.start = *Today()
      p.offset = DAY
    }

  / ("tm" / "tom" "orrow"?) Offset END
    {
      t := *Tomorrow()
    }

  / ("tm" / "tom" "orrow"?) END
    {
      t := *Tomorrow()
      p.offset = DAY
    }

  / "y" ("est" "erday"?)? Offset END
    {
      t := *Yesterday()
    }

  / "y" ("est" "erday"?)? END
    {
      t := *Yesterday()
      p.offset = DAY
    }

Weekday
  <- "mon" "day"?    {p.wday = 0}
  /  "tue" "sday"?   {p.wday = 1}
  /  "wed" "nesday"? {p.wday = 2}
  /  "thu" "rsday"?  {p.wday = 3}
  /  "fri" "day"?    {p.wday = 4}
  /  "sat" "urday"?  {p.wday = 5}
  /  "sun" "day"?    {p.wday = 6}

Month
  <- "jan" "uary"?   {p.month = 1}
  /  "feb" "ruary"?  {p.month = 2}
  /  "mar" "ch"?     {p.month = 3}
  /  "apr" "ril"?    {p.month = 4}
  /  "may"           {p.month = 5}
  /  "jun" "e"?      {p.month = 6}
  /  "jul" "y"?      {p.month = 7}
  /  "aug" "ust"?    {p.month = 8}
  /  "sep" "tember"? {p.month = 9}
  /  "oct" "tober"?  {p.month = 10}
  /  "nov" "ember"?  {p.month = 11}
  /  "dec" "ember"?  {p.month = 12}

Day
  <- (< [1-9] ![0-9] >
  /  < '1' [0-9] >
  /  < '2' [0-9] >
  /  < '3' [0-1] >)
     {
       i, _ := strconv.Atoi(text)
       p.day = i
     }

Time
  <- '12' "p" "m"?  {p.hour = 12}
  /  '12' "a" "m"?  {p.hour = 0}
  /  Hour12 Minute AmPm  # 304p
  /  Hour12 AmPm         # 3p
  /  Hour Minute !AmPm   # 1504 
  /  Hour !AmPm          # 15

Hour
  <- (< [0-1] [0-9] >    # 00-19
  /  < '2' [0-3]   >     # 20-23
  /  < [0-9]   >)        # 0-9
     {
       i, _ := strconv.Atoi(text)
       p.hour = i
     }

Hour12
  <-  (< '1' [0-2] >
  /   < [1-9] >)
     {
       i, _ := strconv.Atoi(text)
       p.hour = i
     }

AmPm
  <- "a" "m"? 
  /  "p" "m"? {p.hour += 12}

Minute
  <- < [0-5] [0-9] >
     {
       i, _ := strconv.Atoi(text)
       p.min = i
     }

Year
  <- < [1-9] [0-9]* >
     {
       i, _ := strconv.Atoi(text)
       p.year = i
     }

Offset
  <-  <OffDir (OffYear / OffWeek / OffDay / OffHour / OffMinute / OffSecond)+>
     { p.offset *= p.offdir }

OffDir    <- '+' {p.offdir=1} / '-' {p.offdir=-1}
OffYear   <- FLOAT 'y' {p.offset += p._float*YEAR}
OffWeek   <- FLOAT 'w' {p.offset += p._float*WEEK}
OffDay    <- FLOAT 'd' {p.offset += p._float*DAY}
OffHour   <- FLOAT 'h' {p.offset += p._float*HOUR}
OffMinute <- FLOAT 'm' {p.offset += p._float*MINUTE}
OffSecond <- FLOAT 's' {p.offset += p._float*SECOND}

FLOAT
  <- < [0-9]+ ('.' [0-9]+)? >
     {
        f, _ := strconv.ParseFloat(text,64);
        p._float = f
     }

END <- !.
